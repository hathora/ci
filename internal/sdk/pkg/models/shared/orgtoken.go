// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/hathora/ci/internal/sdk/pkg/utils"
	"time"
)

type OrgToken struct {
	CreatedAt          time.Time      `json:"createdAt"`
	CreatedBy          string         `json:"createdBy"`
	LastFourCharsOfKey string         `json:"lastFourCharsOfKey"`
	Status             OrgTokenStatus `json:"status"`
	// Readable name for a token. Must be unique within an organization.
	Name  string `json:"name"`
	OrgID string `json:"orgId"`
	// System generated unique identifier for an organization token.
	OrgTokenID string `json:"orgTokenId"`
}

func (o OrgToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrgToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrgToken) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OrgToken) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *OrgToken) GetLastFourCharsOfKey() string {
	if o == nil {
		return ""
	}
	return o.LastFourCharsOfKey
}

func (o *OrgToken) GetStatus() OrgTokenStatus {
	if o == nil {
		return OrgTokenStatus("")
	}
	return o.Status
}

func (o *OrgToken) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrgToken) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *OrgToken) GetOrgTokenID() string {
	if o == nil {
		return ""
	}
	return o.OrgTokenID
}
