// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RoomStatus - The allocation status of a room.
//
// `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
//
// `active`: ready to accept connections
//
// `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
//
// `destroyed`: all associated metadata is deleted
type RoomStatus string

const (
	RoomStatusScheduling RoomStatus = "scheduling"
	RoomStatusActive     RoomStatus = "active"
	RoomStatusSuspended  RoomStatus = "suspended"
	RoomStatusDestroyed  RoomStatus = "destroyed"
)

func (e RoomStatus) ToPointer() *RoomStatus {
	return &e
}

func (e *RoomStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduling":
		fallthrough
	case "active":
		fallthrough
	case "suspended":
		fallthrough
	case "destroyed":
		*e = RoomStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RoomStatus: %v", v)
	}
}
