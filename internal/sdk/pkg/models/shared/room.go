// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/hathora/ci/internal/sdk/pkg/utils"
	"time"
)

// RoomCurrentAllocation - Metadata on an allocated instance of a room.
type RoomCurrentAllocation struct {
	UnscheduledAt *time.Time `json:"unscheduledAt"`
	ScheduledAt   time.Time  `json:"scheduledAt"`
	// System generated unique identifier to a runtime instance of your game server.
	ProcessID string `json:"processId"`
	// System generated unique identifier to an allocated instance of a room.
	RoomAllocationID string `json:"roomAllocationId"`
}

func (r RoomCurrentAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RoomCurrentAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RoomCurrentAllocation) GetUnscheduledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UnscheduledAt
}

func (o *RoomCurrentAllocation) GetScheduledAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ScheduledAt
}

func (o *RoomCurrentAllocation) GetProcessID() string {
	if o == nil {
		return ""
	}
	return o.ProcessID
}

func (o *RoomCurrentAllocation) GetRoomAllocationID() string {
	if o == nil {
		return ""
	}
	return o.RoomAllocationID
}

// Room - A room object represents a game session or match.
type Room struct {
	CurrentAllocation *RoomCurrentAllocation `json:"currentAllocation"`
	// The allocation status of a room.
	//
	// `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
	//
	// `active`: ready to accept connections
	//
	// `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
	//
	// `destroyed`: all associated metadata is deleted
	Status      RoomStatus       `json:"status"`
	Allocations []RoomAllocation `json:"allocations"`
	RoomConfig  *string          `json:"roomConfig"`
	// Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
	// Note: error will be returned if `roomId` is not globally unique.
	RoomID string `json:"roomId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
}

func (o *Room) GetCurrentAllocation() *RoomCurrentAllocation {
	if o == nil {
		return nil
	}
	return o.CurrentAllocation
}

func (o *Room) GetStatus() RoomStatus {
	if o == nil {
		return RoomStatus("")
	}
	return o.Status
}

func (o *Room) GetAllocations() []RoomAllocation {
	if o == nil {
		return []RoomAllocation{}
	}
	return o.Allocations
}

func (o *Room) GetRoomConfig() *string {
	if o == nil {
		return nil
	}
	return o.RoomConfig
}

func (o *Room) GetRoomID() string {
	if o == nil {
		return ""
	}
	return o.RoomID
}

func (o *Room) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}
