// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/hathora/ci/internal/sdk/pkg/utils"
	"io"
	"net/http"
)

type GetLogsForProcessGlobals struct {
	AppID *string `pathParam:"style=simple,explode=false,name=appId"`
}

func (o *GetLogsForProcessGlobals) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

type GetLogsForProcessRequest struct {
	ProcessID string  `pathParam:"style=simple,explode=false,name=processId"`
	AppID     *string `pathParam:"style=simple,explode=false,name=appId"`
	Follow    *bool   `default:"false" queryParam:"style=form,explode=true,name=follow"`
	TailLines *int    `default:"100" queryParam:"style=form,explode=true,name=tailLines"`
}

func (g GetLogsForProcessRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetLogsForProcessRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetLogsForProcessRequest) GetProcessID() string {
	if o == nil {
		return ""
	}
	return o.ProcessID
}

func (o *GetLogsForProcessRequest) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *GetLogsForProcessRequest) GetFollow() *bool {
	if o == nil {
		return nil
	}
	return o.Follow
}

func (o *GetLogsForProcessRequest) GetTailLines() *int {
	if o == nil {
		return nil
	}
	return o.TailLines
}

type GetLogsForProcessResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Ok
	// The Close method must be called on this field, even if it is not used, to prevent resource leaks.
	Stream io.ReadCloser
}

func (o *GetLogsForProcessResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetLogsForProcessResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetLogsForProcessResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetLogsForProcessResponse) GetStream() io.ReadCloser {
	if o == nil {
		return nil
	}
	return o.Stream
}
