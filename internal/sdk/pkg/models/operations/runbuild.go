// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"io"
	"net/http"
)

type RunBuildGlobals struct {
	AppID *string `pathParam:"style=simple,explode=false,name=appId"`
}

func (o *RunBuildGlobals) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

type RunBuildFile struct {
	FileName string `multipartForm:"name=file"`
	Content  []byte `multipartForm:"content"`
}

func (o *RunBuildFile) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *RunBuildFile) GetContent() []byte {
	if o == nil {
		return []byte{}
	}
	return o.Content
}

type RunBuildRequestBody struct {
	File RunBuildFile `multipartForm:"file"`
}

func (o *RunBuildRequestBody) GetFile() RunBuildFile {
	if o == nil {
		return RunBuildFile{}
	}
	return o.File
}

type RunBuildRequest struct {
	BuildID     int                 `pathParam:"style=simple,explode=false,name=buildId"`
	RequestBody RunBuildRequestBody `request:"mediaType=multipart/form-data"`
	AppID       *string             `pathParam:"style=simple,explode=false,name=appId"`
}

func (o *RunBuildRequest) GetBuildID() int {
	if o == nil {
		return 0
	}
	return o.BuildID
}

func (o *RunBuildRequest) GetRequestBody() RunBuildRequestBody {
	if o == nil {
		return RunBuildRequestBody{}
	}
	return o.RequestBody
}

func (o *RunBuildRequest) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

type RunBuildResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Ok
	// The Close method must be called on this field, even if it is not used, to prevent resource leaks.
	Stream io.ReadCloser
}

func (o *RunBuildResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *RunBuildResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *RunBuildResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *RunBuildResponse) GetStream() io.ReadCloser {
	if o == nil {
		return nil
	}
	return o.Stream
}
