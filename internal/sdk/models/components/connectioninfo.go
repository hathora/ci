// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/hathora/ci/internal/sdk/internal/utils"
)

type ConnectionInfoType string

const (
	ConnectionInfoTypeStartingConnectionInfo ConnectionInfoType = "StartingConnectionInfo"
	ConnectionInfoTypeActiveConnectionInfo   ConnectionInfoType = "ActiveConnectionInfo"
)

// ConnectionInfo - Connection information to the default port.
type ConnectionInfo struct {
	StartingConnectionInfo *StartingConnectionInfo `queryParam:"inline"`
	ActiveConnectionInfo   *ActiveConnectionInfo   `queryParam:"inline"`

	Type ConnectionInfoType
}

func CreateConnectionInfoStartingConnectionInfo(startingConnectionInfo StartingConnectionInfo) ConnectionInfo {
	typ := ConnectionInfoTypeStartingConnectionInfo

	return ConnectionInfo{
		StartingConnectionInfo: &startingConnectionInfo,
		Type:                   typ,
	}
}

func CreateConnectionInfoActiveConnectionInfo(activeConnectionInfo ActiveConnectionInfo) ConnectionInfo {
	typ := ConnectionInfoTypeActiveConnectionInfo

	return ConnectionInfo{
		ActiveConnectionInfo: &activeConnectionInfo,
		Type:                 typ,
	}
}

func (u *ConnectionInfo) UnmarshalJSON(data []byte) error {

	var startingConnectionInfo StartingConnectionInfo = StartingConnectionInfo{}
	if err := utils.UnmarshalJSON(data, &startingConnectionInfo, "", true, true); err == nil {
		u.StartingConnectionInfo = &startingConnectionInfo
		u.Type = ConnectionInfoTypeStartingConnectionInfo
		return nil
	}

	var activeConnectionInfo ActiveConnectionInfo = ActiveConnectionInfo{}
	if err := utils.UnmarshalJSON(data, &activeConnectionInfo, "", true, true); err == nil {
		u.ActiveConnectionInfo = &activeConnectionInfo
		u.Type = ConnectionInfoTypeActiveConnectionInfo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ConnectionInfo", string(data))
}

func (u ConnectionInfo) MarshalJSON() ([]byte, error) {
	if u.StartingConnectionInfo != nil {
		return utils.MarshalJSON(u.StartingConnectionInfo, "", true)
	}

	if u.ActiveConnectionInfo != nil {
		return utils.MarshalJSON(u.ActiveConnectionInfo, "", true)
	}

	return nil, errors.New("could not marshal union type ConnectionInfo: all fields are null")
}
