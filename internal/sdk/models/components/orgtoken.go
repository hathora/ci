// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/hathora/ci/internal/sdk/internal/utils"
	"time"
)

type Two string

const (
	TwoAdmin Two = "admin"
)

func (e Two) ToPointer() *Two {
	return &e
}

type ScopesType string

const (
	ScopesTypeArrayOfScope ScopesType = "arrayOfScope"
	ScopesTypeTwo          ScopesType = "2"
)

// Scopes - If not defined, the token has Admin access.
type Scopes struct {
	ArrayOfScope []Scope `queryParam:"inline"`
	Two          *Two    `queryParam:"inline"`

	Type ScopesType
}

func CreateScopesArrayOfScope(arrayOfScope []Scope) Scopes {
	typ := ScopesTypeArrayOfScope

	return Scopes{
		ArrayOfScope: arrayOfScope,
		Type:         typ,
	}
}

func CreateScopesTwo(two Two) Scopes {
	typ := ScopesTypeTwo

	return Scopes{
		Two:  &two,
		Type: typ,
	}
}

func (u *Scopes) UnmarshalJSON(data []byte) error {

	var arrayOfScope []Scope = []Scope{}
	if err := utils.UnmarshalJSON(data, &arrayOfScope, "", true, true); err == nil {
		u.ArrayOfScope = arrayOfScope
		u.Type = ScopesTypeArrayOfScope
		return nil
	}

	var two Two = Two("")
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = ScopesTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Scopes", string(data))
}

func (u Scopes) MarshalJSON() ([]byte, error) {
	if u.ArrayOfScope != nil {
		return utils.MarshalJSON(u.ArrayOfScope, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type Scopes: all fields are null")
}

type OrgToken struct {
	// If not defined, the token has Admin access.
	Scopes             *Scopes        `json:"scopes,omitempty"`
	CreatedAt          time.Time      `json:"createdAt"`
	CreatedBy          string         `json:"createdBy"`
	LastFourCharsOfKey string         `json:"lastFourCharsOfKey"`
	Status             OrgTokenStatus `json:"status"`
	// Readable name for a token. Must be unique within an organization.
	Name  string `json:"name"`
	OrgID string `json:"orgId"`
	// System generated unique identifier for an organization token.
	OrgTokenID string `json:"orgTokenId"`
}

func (o OrgToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrgToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrgToken) GetScopes() *Scopes {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *OrgToken) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OrgToken) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *OrgToken) GetLastFourCharsOfKey() string {
	if o == nil {
		return ""
	}
	return o.LastFourCharsOfKey
}

func (o *OrgToken) GetStatus() OrgTokenStatus {
	if o == nil {
		return OrgTokenStatus("")
	}
	return o.Status
}

func (o *OrgToken) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrgToken) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *OrgToken) GetOrgTokenID() string {
	if o == nil {
		return ""
	}
	return o.OrgTokenID
}
