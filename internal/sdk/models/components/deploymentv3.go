// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/ci/internal/sdk/internal/utils"
	"time"
)

type DeploymentV3Env struct {
	Value string `json:"value"`
	Name  string `json:"name"`
}

func (o *DeploymentV3Env) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *DeploymentV3Env) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type DeploymentV3 struct {
	// Arbitrary metadata associated with a deployment.
	DeploymentTag *string `json:"deploymentTag,omitempty"`
	// Option to shut down processes that have had no new connections or rooms
	// for five minutes.
	IdleTimeoutEnabled bool `json:"idleTimeoutEnabled"`
	// The environment variable that our process will have access to at runtime.
	Env []DeploymentV3Env `json:"env"`
	// Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
	RoomsPerProcess int `json:"roomsPerProcess"`
	// Additional ports your server listens on.
	AdditionalContainerPorts []ContainerPort `json:"additionalContainerPorts"`
	// A container port object represents the transport configruations for how your server will listen.
	DefaultContainerPort ContainerPort `json:"defaultContainerPort"`
	// When the deployment was created.
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy string    `json:"createdBy"`
	// The amount of memory allocated to your process.
	RequestedMemoryMB float64 `json:"requestedMemoryMB"`
	// The number of cores allocated to your process.
	RequestedCPU float64 `json:"requestedCPU"`
	// System generated id for a deployment.
	DeploymentID string `json:"deploymentId"`
	// Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
	BuildTag *string `json:"buildTag,omitempty"`
	// System generated id for a build. Can also be user defined when creating a build.
	BuildID string `json:"buildId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
}

func (d DeploymentV3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeploymentV3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DeploymentV3) GetDeploymentTag() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentTag
}

func (o *DeploymentV3) GetIdleTimeoutEnabled() bool {
	if o == nil {
		return false
	}
	return o.IdleTimeoutEnabled
}

func (o *DeploymentV3) GetEnv() []DeploymentV3Env {
	if o == nil {
		return []DeploymentV3Env{}
	}
	return o.Env
}

func (o *DeploymentV3) GetRoomsPerProcess() int {
	if o == nil {
		return 0
	}
	return o.RoomsPerProcess
}

func (o *DeploymentV3) GetAdditionalContainerPorts() []ContainerPort {
	if o == nil {
		return []ContainerPort{}
	}
	return o.AdditionalContainerPorts
}

func (o *DeploymentV3) GetDefaultContainerPort() ContainerPort {
	if o == nil {
		return ContainerPort{}
	}
	return o.DefaultContainerPort
}

func (o *DeploymentV3) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DeploymentV3) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *DeploymentV3) GetRequestedMemoryMB() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedMemoryMB
}

func (o *DeploymentV3) GetRequestedCPU() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedCPU
}

func (o *DeploymentV3) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *DeploymentV3) GetBuildTag() *string {
	if o == nil {
		return nil
	}
	return o.BuildTag
}

func (o *DeploymentV3) GetBuildID() string {
	if o == nil {
		return ""
	}
	return o.BuildID
}

func (o *DeploymentV3) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}
