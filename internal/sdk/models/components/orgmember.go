// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/hathora/ci/internal/sdk/internal/utils"
	"time"
)

type OrgMemberScopesType string

const (
	OrgMemberScopesTypeUserRole     OrgMemberScopesType = "UserRole"
	OrgMemberScopesTypeArrayOfScope OrgMemberScopesType = "arrayOfScope"
)

type OrgMemberScopes struct {
	UserRole     *UserRole `queryParam:"inline"`
	ArrayOfScope []Scope   `queryParam:"inline"`

	Type OrgMemberScopesType
}

func CreateOrgMemberScopesUserRole(userRole UserRole) OrgMemberScopes {
	typ := OrgMemberScopesTypeUserRole

	return OrgMemberScopes{
		UserRole: &userRole,
		Type:     typ,
	}
}

func CreateOrgMemberScopesArrayOfScope(arrayOfScope []Scope) OrgMemberScopes {
	typ := OrgMemberScopesTypeArrayOfScope

	return OrgMemberScopes{
		ArrayOfScope: arrayOfScope,
		Type:         typ,
	}
}

func (u *OrgMemberScopes) UnmarshalJSON(data []byte) error {

	var userRole UserRole = UserRole("")
	if err := utils.UnmarshalJSON(data, &userRole, "", true, true); err == nil {
		u.UserRole = &userRole
		u.Type = OrgMemberScopesTypeUserRole
		return nil
	}

	var arrayOfScope []Scope = []Scope{}
	if err := utils.UnmarshalJSON(data, &arrayOfScope, "", true, true); err == nil {
		u.ArrayOfScope = arrayOfScope
		u.Type = OrgMemberScopesTypeArrayOfScope
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OrgMemberScopes", string(data))
}

func (u OrgMemberScopes) MarshalJSON() ([]byte, error) {
	if u.UserRole != nil {
		return utils.MarshalJSON(u.UserRole, "", true)
	}

	if u.ArrayOfScope != nil {
		return utils.MarshalJSON(u.ArrayOfScope, "", true)
	}

	return nil, errors.New("could not marshal union type OrgMemberScopes: all fields are null")
}

type OrgMember struct {
	Scopes    OrgMemberScopes `json:"scopes"`
	LastLogin *time.Time      `json:"lastLogin,omitempty"`
	JoinedAt  time.Time       `json:"joinedAt"`
	CreatedAt time.Time       `json:"createdAt"`
	InvitedBy string          `json:"invitedBy"`
	// A user's email.
	UserEmail string `json:"userEmail"`
	// System generated unique identifier for an organization. Not guaranteed to have a specific format.
	OrgID string `json:"orgId"`
}

func (o OrgMember) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrgMember) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrgMember) GetScopes() OrgMemberScopes {
	if o == nil {
		return OrgMemberScopes{}
	}
	return o.Scopes
}

func (o *OrgMember) GetLastLogin() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastLogin
}

func (o *OrgMember) GetJoinedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.JoinedAt
}

func (o *OrgMember) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OrgMember) GetInvitedBy() string {
	if o == nil {
		return ""
	}
	return o.InvitedBy
}

func (o *OrgMember) GetUserEmail() string {
	if o == nil {
		return ""
	}
	return o.UserEmail
}

func (o *OrgMember) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}
