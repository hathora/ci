// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"cloudapi/pkg/utils"
	"encoding/json"
	"fmt"
	"time"
)

type Env struct {
	Value string `json:"value"`
	Name  string `json:"name"`
}

func (o *Env) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Env) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// DeploymentTransportType
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type DeploymentTransportType string

const (
	DeploymentTransportTypeTCP DeploymentTransportType = "tcp"
	DeploymentTransportTypeUDP DeploymentTransportType = "udp"
	DeploymentTransportTypeTLS DeploymentTransportType = "tls"
)

func (e DeploymentTransportType) ToPointer() *DeploymentTransportType {
	return &e
}

func (e *DeploymentTransportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "tls":
		*e = DeploymentTransportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeploymentTransportType: %v", v)
	}
}

// Deployment is a versioned configuration for a build that describes runtime behavior.
type Deployment struct {
	// Option to shut down processes that have had no new connections or rooms
	// for five minutes.
	IdleTimeoutEnabled *bool `default:"true" json:"idleTimeoutEnabled"`
	// The environment variable that our process will have access to at runtime.
	Env []Env `json:"env"`
	// Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
	RoomsPerProcess int `json:"roomsPerProcess"`
	// A plan defines how much CPU and memory is required to run an instance of your game server.
	//
	// `tiny`: shared core, 1gb memory
	//
	// `small`: 1 core, 2gb memory
	//
	// `medium`: 2 core, 4gb memory
	//
	// `large`: 4 core, 8gb memory
	PlanName PlanName `json:"planName"`
	// Additional ports your server listens on.
	AdditionalContainerPorts []ContainerPort `json:"additionalContainerPorts"`
	// A container port object represents the transport configruations for how your server will listen.
	DefaultContainerPort ContainerPort `json:"defaultContainerPort"`
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	TransportType DeploymentTransportType `json:"transportType"`
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	ContainerPort float64 `json:"containerPort"`
	// When the deployment was created.
	CreatedAt time.Time `json:"createdAt"`
	// UserId or email address for the user that created the deployment.
	CreatedBy string `json:"createdBy"`
	// The amount of memory allocated to your process.
	RequestedMemoryMB int `json:"requestedMemoryMB"`
	// The number of cores allocated to your process.
	RequestedCPU float64 `json:"requestedCPU"`
	// System generated id for a deployment. Increments by 1.
	DeploymentID int `json:"deploymentId"`
	// System generated id for a build. Increments by 1.
	BuildID int `json:"buildId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
}

func (d Deployment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Deployment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Deployment) GetIdleTimeoutEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IdleTimeoutEnabled
}

func (o *Deployment) GetEnv() []Env {
	if o == nil {
		return []Env{}
	}
	return o.Env
}

func (o *Deployment) GetRoomsPerProcess() int {
	if o == nil {
		return 0
	}
	return o.RoomsPerProcess
}

func (o *Deployment) GetPlanName() PlanName {
	if o == nil {
		return PlanName("")
	}
	return o.PlanName
}

func (o *Deployment) GetAdditionalContainerPorts() []ContainerPort {
	if o == nil {
		return []ContainerPort{}
	}
	return o.AdditionalContainerPorts
}

func (o *Deployment) GetDefaultContainerPort() ContainerPort {
	if o == nil {
		return ContainerPort{}
	}
	return o.DefaultContainerPort
}

func (o *Deployment) GetTransportType() DeploymentTransportType {
	if o == nil {
		return DeploymentTransportType("")
	}
	return o.TransportType
}

func (o *Deployment) GetContainerPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.ContainerPort
}

func (o *Deployment) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Deployment) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *Deployment) GetRequestedMemoryMB() int {
	if o == nil {
		return 0
	}
	return o.RequestedMemoryMB
}

func (o *Deployment) GetRequestedCPU() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedCPU
}

func (o *Deployment) GetDeploymentID() int {
	if o == nil {
		return 0
	}
	return o.DeploymentID
}

func (o *Deployment) GetBuildID() int {
	if o == nil {
		return 0
	}
	return o.BuildID
}

func (o *Deployment) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}
